from aiogram import F, Router, types
from aiogram.client.bot import Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from app.keyboards.start.start import start_keyboard
from app.scripts.auxiliary_functions.delete_messages import (
    delete_previous_messages_bot,
    delete_previous_messages_user,
)
from app.templates.start.start import back_main_menu_message, start_message
from sentry_logging.sentry_setup import sentry_sdk

from app.states.camp_info.edit_camp_info import EditEvent
from sqlalchemy.sql.functions import current_date

router = Router()


def create_keyboard_for_time(dates: list):
    keyboard = []
    row = []
    for date in dates:
        button = InlineKeyboardButton(text=date, callback_data=f"test_dates_{date}")
        row.append(button)
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    keyboard.append(
        [
            InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏", callback_data=f"book_lesson"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data=f"return_to_dates"),
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=keyboard)



@router.callback_query(Command("test"))
async def command_edit_handler(message: types.Message, state: FSMContext) -> None:

    await state.update_data(dates=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                            coaches=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                            current_date=1,
                            current_coach=1
                            )


    await state.set_state(EditEvent.name)


@router.callback_query(EditEvent.name)
async def process_number_selection(
    callback_query: types.CallbackQuery, state: FSMContext
):
    try:
        data = await state.get_data()

        dates = data.get("dates", [])
        coaches = data.get("coaches", [])

        if callback_query.data.startswith("test_dates_"):
            date_id = int(callback_query.data.split("_")[-1])
            date = available_dates[date_id]

            await state.update_data(current_date=date)

            await callback_query.message.edit_caption(
                caption="–¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ –∑—Ä—É—á–Ω–∏–π –¥–ª—è —Ç–µ–±–µ —á–∞—Å ü§©"
                "–¢–∏ –º–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ –æ–¥—Ä–∞–∑—É –∫—ñ–ª—å–∫–∞ –∑–∞–Ω—è—Ç—å,"
                " –∫–ª—ñ–∫–Ω—É–≤—à–∏ –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –∫–Ω–æ–ø–æ–∫.\n\n"
                "<b>–ó–í–ï–†–ù–ò –£–í–ê–ì–£</b> üëá\n\n"
                "‚ùó–î–µ—è–∫—ñ —Ç—Ä–µ–Ω–µ—Ä–∏ –º–∞—é—Ç—å <b>–æ–±–º–µ–∂–µ–Ω–Ω—è –ø–æ </b>"
                "<b>–∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–Ω—è—Ç—å</b>, "
                "–ø–µ—Ä–µ–≤–∏—â–∏–≤—à–∏ —è–∫–µ —Ç–∏ –ø–æ–±–∞—á–∏—à –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è."
            )

            await callback_query.message.edit_reply_markup(
                reply_markup=create_keyboard_for_time(list(all_dates[date].keys()))
            )

        if callback_query.data.startswith("time_"):
            if (
                lesson_restrictions
                and (len(choose_dates) + booked_lessons_count) >= lesson_restrictions
            ):
                await callback_query.answer(
                    "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —É—Ä–æ–∫—ñ–≤, –Ω—ñ–∂ –¥–æ–∑–≤–æ–ª–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–æ–º.",
                    show_alert=True,
                )
                return

            time_id = callback_query.data.split("_")[-1]
            choose_dates.append(all_dates[current_date][time_id])

            all_dates[current_date].pop(time_id)
            await state.update_data(all_dates=all_dates, choose_dates=choose_dates)
            keyboard = create_keyboard_for_time(all_dates[current_date])

            await callback_query.message.edit_reply_markup(reply_markup=keyboard)

        if callback_query.data == "return_to_dates":
            keyboard = create_keyboard_for_dates(available_dates)

            await callback_query.message.edit_caption(caption="–Ø–∫–∞ –¥–∞—Ç–∞ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?")
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)

        if callback_query.data == "book_lesson":
            await state.update_data(selected_dates=choose_dates)
            data_of_lessons = await get_lessons_info(choose_dates)

            await callback_query.message.edit_caption(
                caption=format_lesson_info(
                    data_of_lessons, confirm_book_lessons_message
                )
            )
            await callback_query.message.edit_reply_markup(
                reply_markup=confirm_book_lessons_keyboard
            )

            await state.set_state(LessonRegistration.confirmation)

    except Exception as e:
        with sentry_sdk.configure_scope() as scope:
            scope.set_extra("user_id", callback_query.from_user.id)
            scope.set_extra("username", callback_query.from_user.username)

        sentry_sdk.capture_exception(e)